
nand_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000eb8  08000eb8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000eb8  08000eb8  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb8  08000eb8  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb8  08000eb8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb8  08000eb8  00001eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ebc  08000ebc  00001ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000ec0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002164  2000000c  08000ecc  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002170  08000ecc  00002170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058b8  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001083  00000000  00000000  000078f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000568  00000000  00000000  00008978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003f0  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cce  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074ac  00000000  00000000  00031f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa0f3  00000000  00000000  0003944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013353d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014c4  00000000  00000000  00133580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00134a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08000ea0 	.word	0x08000ea0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08000ea0 	.word	0x08000ea0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fa5b 	bl	80006ba <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f824 	bl	8000250 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f890 	bl	800032c <MX_GPIO_Init>
  MX_FMC_Init();
 800020c:	f000 f828 	bl	8000260 <MX_FMC_Init>

  /* USER CODE BEGIN 2 */
  // Initialize test data
  memset(write_data, 0xAA, NAND_PAGE_SIZE); // Fill with pattern 0xAA
 8000210:	f44f 5284 	mov.w	r2, #4224	@ 0x1080
 8000214:	21aa      	movs	r1, #170	@ 0xaa
 8000216:	480c      	ldr	r0, [pc, #48]	@ (8000248 <main+0x4c>)
 8000218:	f000 fe16 	bl	8000e48 <memset>
  memset(read_data, 0x00, NAND_PAGE_SIZE);  // Clear read buffer
 800021c:	f44f 5284 	mov.w	r2, #4224	@ 0x1080
 8000220:	2100      	movs	r1, #0
 8000222:	480a      	ldr	r0, [pc, #40]	@ (800024c <main+0x50>)
 8000224:	f000 fe10 	bl	8000e48 <memset>

  // Write data to page 0
  NAND_WritePage(write_data, 0);
 8000228:	2100      	movs	r1, #0
 800022a:	4807      	ldr	r0, [pc, #28]	@ (8000248 <main+0x4c>)
 800022c:	f000 f900 	bl	8000430 <NAND_WritePage>

  // Read data back from page 0
  NAND_ReadPage(read_data, 0);
 8000230:	2100      	movs	r1, #0
 8000232:	4806      	ldr	r0, [pc, #24]	@ (800024c <main+0x50>)
 8000234:	f000 f924 	bl	8000480 <NAND_ReadPage>

  // Verify data
  if (memcmp(write_data, read_data, NAND_PAGE_SIZE) == 0)
 8000238:	f44f 5284 	mov.w	r2, #4224	@ 0x1080
 800023c:	4903      	ldr	r1, [pc, #12]	@ (800024c <main+0x50>)
 800023e:	4802      	ldr	r0, [pc, #8]	@ (8000248 <main+0x4c>)
 8000240:	f000 fdf2 	bl	8000e28 <memcmp>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	bf00      	nop
 8000246:	e7fd      	b.n	8000244 <main+0x48>
 8000248:	20000068 	.word	0x20000068
 800024c:	200010e8 	.word	0x200010e8

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  // Clock configuration as per your setup
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
	...

08000260 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b089      	sub	sp, #36	@ 0x24
 8000264:	af00      	add	r7, sp, #0
  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8000274:	463b      	mov	r3, r7
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]

  hnand1.Instance = FMC_NAND_DEVICE;
 8000280:	4b28      	ldr	r3, [pc, #160]	@ (8000324 <MX_FMC_Init+0xc4>)
 8000282:	4a29      	ldr	r2, [pc, #164]	@ (8000328 <MX_FMC_Init+0xc8>)
 8000284:	601a      	str	r2, [r3, #0]
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 8000286:	4b27      	ldr	r3, [pc, #156]	@ (8000324 <MX_FMC_Init+0xc4>)
 8000288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800028c:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 800028e:	4b25      	ldr	r3, [pc, #148]	@ (8000324 <MX_FMC_Init+0xc4>)
 8000290:	2202      	movs	r2, #2
 8000292:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 8000294:	4b23      	ldr	r3, [pc, #140]	@ (8000324 <MX_FMC_Init+0xc4>)
 8000296:	2200      	movs	r2, #0
 8000298:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 800029a:	4b22      	ldr	r3, [pc, #136]	@ (8000324 <MX_FMC_Init+0xc4>)
 800029c:	2240      	movs	r2, #64	@ 0x40
 800029e:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_512BYTE;
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80002a6:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 1;
 80002a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 1;
 80002ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	61da      	str	r2, [r3, #28]

  hnand1.Config.PageSize = NAND_PAGE_SIZE;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002b6:	f44f 5284 	mov.w	r2, #4224	@ 0x1080
 80002ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 128;
 80002bc:	4b19      	ldr	r3, [pc, #100]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002be:	2280      	movs	r2, #128	@ 0x80
 80002c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 80002c2:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002c4:	2240      	movs	r2, #64	@ 0x40
 80002c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = NAND_TOTAL_BLOCKS;
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 1;
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 4096;
 80002d6:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 80002de:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_FMC_Init+0xc4>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  ComSpaceTiming.SetupTime = 12;
 80002e6:	230c      	movs	r3, #12
 80002e8:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 20;
 80002ea:	2314      	movs	r3, #20
 80002ec:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 10;
 80002ee:	230a      	movs	r3, #10
 80002f0:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 10;
 80002f2:	230a      	movs	r3, #10
 80002f4:	61fb      	str	r3, [r7, #28]

  AttSpaceTiming = ComSpaceTiming;
 80002f6:	463c      	mov	r4, r7
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000302:	463a      	mov	r2, r7
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4806      	ldr	r0, [pc, #24]	@ (8000324 <MX_FMC_Init+0xc4>)
 800030c:	f000 fce6 	bl	8000cdc <HAL_NAND_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_FMC_Init+0xba>
  {
    Error_Handler();
 8000316:	f000 f8db 	bl	80004d0 <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3724      	adds	r7, #36	@ 0x24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd90      	pop	{r4, r7, pc}
 8000322:	bf00      	nop
 8000324:	20000028 	.word	0x20000028
 8000328:	a0000080 	.word	0xa0000080

0800032c <MX_GPIO_Init>:

/* GPIO initialization function */
static void MX_GPIO_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <MX_GPIO_Init+0x44>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000336:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <MX_GPIO_Init+0x44>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <MX_GPIO_Init+0x44>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000342:	f003 0310 	and.w	r3, r3, #16
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <MX_GPIO_Init+0x44>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034e:	4a08      	ldr	r2, [pc, #32]	@ (8000370 <MX_GPIO_Init+0x44>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000356:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <MX_GPIO_Init+0x44>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035a:	f003 0308 	and.w	r3, r3, #8
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <NAND_SendCommand>:

/* NAND command and data handling functions */
void NAND_SendCommand(uint8_t command)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
  *(__IO uint8_t *)(NAND_COMMAND_ADDRESS | CLE) = command;
 800037e:	f04f 2280 	mov.w	r2, #2147516416	@ 0x80008000
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	7013      	strb	r3, [r2, #0]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <NAND_SendAddress>:

void NAND_SendAddress(uint8_t address)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
  *(__IO uint8_t *)(NAND_COMMAND_ADDRESS | ALE) = address;
 800039e:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <NAND_SendAddress+0x1c>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	7013      	strb	r3, [r2, #0]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	80004000 	.word	0x80004000

080003b4 <NAND_WriteData>:

void NAND_WriteData(uint8_t *data, uint32_t length)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < length; i++)
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	e008      	b.n	80003d6 <NAND_WriteData+0x22>
  {
    *(__IO uint8_t *)NAND_DATA_ADDRESS = data[i];
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	4413      	add	r3, r2
 80003ca:	4a08      	ldr	r2, [pc, #32]	@ (80003ec <NAND_WriteData+0x38>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	7013      	strb	r3, [r2, #0]
  for (uint32_t i = 0; i < length; i++)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d3f2      	bcc.n	80003c4 <NAND_WriteData+0x10>
  }
}
 80003de:	bf00      	nop
 80003e0:	bf00      	nop
 80003e2:	3714      	adds	r7, #20
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	80001000 	.word	0x80001000

080003f0 <NAND_ReadData>:

void NAND_ReadData(uint8_t *data, uint32_t length)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < length; i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e009      	b.n	8000414 <NAND_ReadData+0x24>
  {
    data[i] = *(__IO uint8_t *)NAND_DATA_ADDRESS;
 8000400:	490a      	ldr	r1, [pc, #40]	@ (800042c <NAND_ReadData+0x3c>)
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4413      	add	r3, r2
 8000408:	780a      	ldrb	r2, [r1, #0]
 800040a:	b2d2      	uxtb	r2, r2
 800040c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < length; i++)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	429a      	cmp	r2, r3
 800041a:	d3f1      	bcc.n	8000400 <NAND_ReadData+0x10>
  }
}
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	80001000 	.word	0x80001000

08000430 <NAND_WritePage>:

void NAND_WritePage(uint8_t *data, uint32_t page_address)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  NAND_SendCommand(0x80); // Program page command
 800043a:	2080      	movs	r0, #128	@ 0x80
 800043c:	f7ff ff9a 	bl	8000374 <NAND_SendCommand>
  NAND_SendAddress(page_address & 0xFF);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ffa5 	bl	8000394 <NAND_SendAddress>
  NAND_SendAddress((page_address >> 8) & 0xFF);
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	0a1b      	lsrs	r3, r3, #8
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff9f 	bl	8000394 <NAND_SendAddress>
  NAND_SendAddress((page_address >> 16) & 0xFF);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	0c1b      	lsrs	r3, r3, #16
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff99 	bl	8000394 <NAND_SendAddress>
  NAND_WriteData(data, NAND_PAGE_SIZE);
 8000462:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ffa4 	bl	80003b4 <NAND_WriteData>
  NAND_SendCommand(0x10); // Program confirm
 800046c:	2010      	movs	r0, #16
 800046e:	f7ff ff81 	bl	8000374 <NAND_SendCommand>
  HAL_Delay(1); // Wait for programming to complete
 8000472:	2001      	movs	r0, #1
 8000474:	f000 f996 	bl	80007a4 <HAL_Delay>
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <NAND_ReadPage>:

void NAND_ReadPage(uint8_t *data, uint32_t page_address)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  NAND_SendCommand(0x00); // Read command
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff72 	bl	8000374 <NAND_SendCommand>
  NAND_SendAddress(page_address & 0xFF);
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff7d 	bl	8000394 <NAND_SendAddress>
  NAND_SendAddress((page_address >> 8) & 0xFF);
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	0a1b      	lsrs	r3, r3, #8
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff77 	bl	8000394 <NAND_SendAddress>
  NAND_SendAddress((page_address >> 16) & 0xFF);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff71 	bl	8000394 <NAND_SendAddress>
  NAND_SendCommand(0x30); // Read confirm
 80004b2:	2030      	movs	r0, #48	@ 0x30
 80004b4:	f7ff ff5e 	bl	8000374 <NAND_SendCommand>
  HAL_Delay(1); // Wait for data to be ready
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 f973 	bl	80007a4 <HAL_Delay>
  NAND_ReadData(data, NAND_PAGE_SIZE);
 80004be:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f7ff ff94 	bl	80003f0 <NAND_ReadData>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <Error_Handler>:

/**
  * @brief Error Handler
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <Error_Handler+0x4>

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <HAL_MspInit+0x44>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004e2:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <HAL_MspInit+0x44>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <HAL_MspInit+0x44>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004fa:	4a08      	ldr	r2, [pc, #32]	@ (800051c <HAL_MspInit+0x44>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000500:	6593      	str	r3, [r2, #88]	@ 0x58
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <HAL_FMC_MspInit+0xa0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d13d      	bne.n	80005b8 <HAL_FMC_MspInit+0x98>
    return;
  }
  FMC_Initialized = 1;
 800053c:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <HAL_FMC_MspInit+0xa0>)
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000542:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <HAL_FMC_MspInit+0xa4>)
 8000544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000546:	4a1f      	ldr	r2, [pc, #124]	@ (80005c4 <HAL_FMC_MspInit+0xa4>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6513      	str	r3, [r2, #80]	@ 0x50
 800054e:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <HAL_FMC_MspInit+0xa4>)
 8000550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD6   ------> FMC_NWAIT
  PD7   ------> FMC_NCE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800055a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800055e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	2302      	movs	r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800056c:	230c      	movs	r3, #12
 800056e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4619      	mov	r1, r3
 8000574:	4814      	ldr	r0, [pc, #80]	@ (80005c8 <HAL_FMC_MspInit+0xa8>)
 8000576:	f000 fa1f 	bl	80009b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800057a:	f24c 73f3 	movw	r3, #51187	@ 0xc7f3
 800057e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000588:	2303      	movs	r3, #3
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058c:	230c      	movs	r3, #12
 800058e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <HAL_FMC_MspInit+0xac>)
 8000596:	f000 fa0f 	bl	80009b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800059a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800059e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a8:	2303      	movs	r3, #3
 80005aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4619      	mov	r1, r3
 80005b0:	4806      	ldr	r0, [pc, #24]	@ (80005cc <HAL_FMC_MspInit+0xac>)
 80005b2:	f000 fa01 	bl	80009b8 <HAL_GPIO_Init>
 80005b6:	e000      	b.n	80005ba <HAL_FMC_MspInit+0x9a>
    return;
 80005b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20002168 	.word	0x20002168
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48001000 	.word	0x48001000
 80005cc:	48000c00 	.word	0x48000c00

080005d0 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80005d8:	f7ff ffa2 	bl	8000520 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f893 	bl	8000764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <SystemInit+0x20>)
 800064a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <SystemInit+0x20>)
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800066c:	f7ff ffea 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000696:	f000 fbdf 	bl	8000e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069a:	f7ff fdaf 	bl	80001fc <main>

0800069e <LoopForever>:

LoopForever:
    b LoopForever
 800069e:	e7fe      	b.n	800069e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ac:	08000ec0 	.word	0x08000ec0
  ldr r2, =_sbss
 80006b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b4:	20002170 	.word	0x20002170

080006b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_IRQHandler>

080006ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f943 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 f80e 	bl	80006ec <HAL_InitTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e001      	b.n	80006e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006dc:	f7ff fefc 	bl	80004d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006f8:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <HAL_InitTick+0x6c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d023      	beq.n	8000748 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000700:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_InitTick+0x70>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <HAL_InitTick+0x6c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000712:	fbb2 f3f3 	udiv	r3, r2, r3
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f941 	bl	800099e <HAL_SYSTICK_Config>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10f      	bne.n	8000742 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d809      	bhi.n	800073c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f919 	bl	8000966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_InitTick+0x74>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e007      	b.n	800074c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e004      	b.n	800074c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e001      	b.n	800074c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800074c:	7bfb      	ldrb	r3, [r7, #15]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	20000000 	.word	0x20000000
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_IncTick+0x20>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HAL_IncTick+0x24>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a04      	ldr	r2, [pc, #16]	@ (8000788 <HAL_IncTick+0x24>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000008 	.word	0x20000008
 8000788:	2000216c 	.word	0x2000216c

0800078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b03      	ldr	r3, [pc, #12]	@ (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	2000216c 	.word	0x2000216c

080007a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ac:	f7ff ffee 	bl	800078c <HAL_GetTick>
 80007b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007bc:	d005      	beq.n	80007ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_Delay+0x44>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ca:	bf00      	nop
 80007cc:	f7ff ffde 	bl	800078c <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d8f7      	bhi.n	80007cc <HAL_Delay+0x28>
  {
  }
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000008 	.word	0x20000008

080007ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000808:	4013      	ands	r3, r2
 800080a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800081c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081e:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <__NVIC_SetPriorityGrouping+0x44>)
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	60d3      	str	r3, [r2, #12]
}
 8000824:	bf00      	nop
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <__NVIC_GetPriorityGrouping+0x18>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	f003 0307 	and.w	r3, r3, #7
}
 8000842:	4618      	mov	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	@ (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	@ (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	@ 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800091c:	d301      	bcc.n	8000922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2301      	movs	r3, #1
 8000920:	e00f      	b.n	8000942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <SysTick_Config+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092a:	210f      	movs	r1, #15
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f7ff ff8e 	bl	8000850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <SysTick_Config+0x40>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	@ (800094c <SysTick_Config+0x40>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff47 	bl	80007ec <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff5c 	bl	8000834 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ff8e 	bl	80008a4 <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff5d 	bl	8000850 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ffb0 	bl	800090c <SysTick_Config>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c6:	e166      	b.n	8000c96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	2101      	movs	r1, #1
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 8158 	beq.w	8000c90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d005      	beq.n	80009f8 <HAL_GPIO_Init+0x40>
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d130      	bne.n	8000a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	091b      	lsrs	r3, r3, #4
 8000a44:	f003 0201 	and.w	r2, r3, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d017      	beq.n	8000a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	2203      	movs	r2, #3
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d123      	bne.n	8000aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	08da      	lsrs	r2, r3, #3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3208      	adds	r2, #8
 8000ae4:	6939      	ldr	r1, [r7, #16]
 8000ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0203 	and.w	r2, r3, #3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 80b2 	beq.w	8000c90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2c:	4b61      	ldr	r3, [pc, #388]	@ (8000cb4 <HAL_GPIO_Init+0x2fc>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b30:	4a60      	ldr	r2, [pc, #384]	@ (8000cb4 <HAL_GPIO_Init+0x2fc>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b38:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb4 <HAL_GPIO_Init+0x2fc>)
 8000b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b44:	4a5c      	ldr	r2, [pc, #368]	@ (8000cb8 <HAL_GPIO_Init+0x300>)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	220f      	movs	r2, #15
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b6e:	d02b      	beq.n	8000bc8 <HAL_GPIO_Init+0x210>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a52      	ldr	r2, [pc, #328]	@ (8000cbc <HAL_GPIO_Init+0x304>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d025      	beq.n	8000bc4 <HAL_GPIO_Init+0x20c>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a51      	ldr	r2, [pc, #324]	@ (8000cc0 <HAL_GPIO_Init+0x308>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d01f      	beq.n	8000bc0 <HAL_GPIO_Init+0x208>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a50      	ldr	r2, [pc, #320]	@ (8000cc4 <HAL_GPIO_Init+0x30c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d019      	beq.n	8000bbc <HAL_GPIO_Init+0x204>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a4f      	ldr	r2, [pc, #316]	@ (8000cc8 <HAL_GPIO_Init+0x310>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <HAL_GPIO_Init+0x200>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4e      	ldr	r2, [pc, #312]	@ (8000ccc <HAL_GPIO_Init+0x314>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d00d      	beq.n	8000bb4 <HAL_GPIO_Init+0x1fc>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000cd0 <HAL_GPIO_Init+0x318>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x1f8>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8000cd4 <HAL_GPIO_Init+0x31c>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d101      	bne.n	8000bac <HAL_GPIO_Init+0x1f4>
 8000ba8:	2307      	movs	r3, #7
 8000baa:	e00e      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bac:	2308      	movs	r3, #8
 8000bae:	e00c      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	e00a      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e008      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e004      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_Init+0x212>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	f002 0203 	and.w	r2, r2, #3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bda:	4937      	ldr	r1, [pc, #220]	@ (8000cb8 <HAL_GPIO_Init+0x300>)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c0c:	4a32      	ldr	r2, [pc, #200]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c12:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c36:	4a28      	ldr	r2, [pc, #160]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c60:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c8a:	4a13      	ldr	r2, [pc, #76]	@ (8000cd8 <HAL_GPIO_Init+0x320>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f47f ae91 	bne.w	80009c8 <HAL_GPIO_Init+0x10>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	48001400 	.word	0x48001400
 8000cd0:	48001800 	.word	0x48001800
 8000cd4:	48001c00 	.word	0x48001c00
 8000cd8:	40010400 	.word	0x40010400

08000cdc <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e031      	b.n	8000d56 <HAL_NAND_Init+0x7a>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d106      	bne.n	8000d0c <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f7ff fc62 	bl	80005d0 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3304      	adds	r3, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4610      	mov	r0, r2
 8000d18:	f000 f822 	bl	8000d60 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	461a      	mov	r2, r3
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	f000 f844 	bl	8000db4 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	461a      	mov	r2, r3
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f000 f859 	bl	8000dee <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f042 0204 	orr.w	r2, r2, #4
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <FMC_NAND_Init+0x50>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	6851      	ldr	r1, [r2, #4]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	6892      	ldr	r2, [r2, #8]
 8000d7a:	4311      	orrs	r1, r2
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	68d2      	ldr	r2, [r2, #12]
 8000d80:	4311      	orrs	r1, r2
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	6912      	ldr	r2, [r2, #16]
 8000d86:	4311      	orrs	r1, r2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	6952      	ldr	r2, [r2, #20]
 8000d8c:	0252      	lsls	r2, r2, #9
 8000d8e:	4311      	orrs	r1, r2
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	6992      	ldr	r2, [r2, #24]
 8000d94:	0352      	lsls	r2, r2, #13
 8000d96:	430a      	orrs	r2, r1
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	f043 0208 	orr.w	r2, r3, #8
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	fff00181 	.word	0xfff00181

08000db4 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8000dca:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8000dd2:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8000dda:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8000e04:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8000e0c:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8000e14:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <memcmp>:
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	3901      	subs	r1, #1
 8000e2c:	4402      	add	r2, r0
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d101      	bne.n	8000e36 <memcmp+0xe>
 8000e32:	2000      	movs	r0, #0
 8000e34:	e005      	b.n	8000e42 <memcmp+0x1a>
 8000e36:	7803      	ldrb	r3, [r0, #0]
 8000e38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d001      	beq.n	8000e44 <memcmp+0x1c>
 8000e40:	1b18      	subs	r0, r3, r4
 8000e42:	bd10      	pop	{r4, pc}
 8000e44:	3001      	adds	r0, #1
 8000e46:	e7f2      	b.n	8000e2e <memcmp+0x6>

08000e48 <memset>:
 8000e48:	4402      	add	r2, r0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d100      	bne.n	8000e52 <memset+0xa>
 8000e50:	4770      	bx	lr
 8000e52:	f803 1b01 	strb.w	r1, [r3], #1
 8000e56:	e7f9      	b.n	8000e4c <memset+0x4>

08000e58 <__libc_init_array>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e90 <__libc_init_array+0x38>)
 8000e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e94 <__libc_init_array+0x3c>)
 8000e5e:	1b64      	subs	r4, r4, r5
 8000e60:	10a4      	asrs	r4, r4, #2
 8000e62:	2600      	movs	r6, #0
 8000e64:	42a6      	cmp	r6, r4
 8000e66:	d109      	bne.n	8000e7c <__libc_init_array+0x24>
 8000e68:	4d0b      	ldr	r5, [pc, #44]	@ (8000e98 <__libc_init_array+0x40>)
 8000e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e9c <__libc_init_array+0x44>)
 8000e6c:	f000 f818 	bl	8000ea0 <_init>
 8000e70:	1b64      	subs	r4, r4, r5
 8000e72:	10a4      	asrs	r4, r4, #2
 8000e74:	2600      	movs	r6, #0
 8000e76:	42a6      	cmp	r6, r4
 8000e78:	d105      	bne.n	8000e86 <__libc_init_array+0x2e>
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
 8000e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e80:	4798      	blx	r3
 8000e82:	3601      	adds	r6, #1
 8000e84:	e7ee      	b.n	8000e64 <__libc_init_array+0xc>
 8000e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e8a:	4798      	blx	r3
 8000e8c:	3601      	adds	r6, #1
 8000e8e:	e7f2      	b.n	8000e76 <__libc_init_array+0x1e>
 8000e90:	08000eb8 	.word	0x08000eb8
 8000e94:	08000eb8 	.word	0x08000eb8
 8000e98:	08000eb8 	.word	0x08000eb8
 8000e9c:	08000ebc 	.word	0x08000ebc

08000ea0 <_init>:
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea2:	bf00      	nop
 8000ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea6:	bc08      	pop	{r3}
 8000ea8:	469e      	mov	lr, r3
 8000eaa:	4770      	bx	lr

08000eac <_fini>:
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eae:	bf00      	nop
 8000eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb2:	bc08      	pop	{r3}
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	4770      	bx	lr
